from app.database import get_connection

# SQL query to create the Inventory Table
CREATE_INVENTORY_TABLE = """CREATE TABLE inventory (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_name VARCHAR2(100),
    quantity NUMBER,
    price NUMBER,
    batch_name VARCHAR2(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);"""

# SQL query to create the Employees Table
CREATE_EMPLOYEE_TABLE = """CREATE TABLE employees (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100),
    contact_details VARCHAR2(255),
    department VARCHAR2(100),
    joined_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);"""

def create_tables():
    """Create the required tables in the database."""
    connection = get_connection()
    if not connection:
        return
    cursor = connection.cursor()
    try:
        cursor.execute("""BEGIN
                            EXECUTE IMMEDIATE 'CREATE TABLE inventory (...)';
                          EXCEPTION
                            WHEN OTHERS THEN
                              IF SQLCODE != -955 THEN RAISE;
                              END IF;
                          END;""")
        # Repeat for other tables...
    finally:
        cursor.close()
        connection.close()

# Add a new inventory item
def add_inventory_item(product_name, quantity, price, batch_name):
    """Insert a new inventory item into the database."""
    connection = get_connection()
    cursor = connection.cursor()
    cursor.execute(
        "INSERT INTO inventory (product_name, quantity, price, batch_name) VALUES (:1, :2, :3, :4)",
        [product_name, quantity, price, batch_name]
    )
    connection.commit()
    cursor.close()
    connection.close()

# Update the quantity of an inventory item
def update_inventory_item(item_id, new_quantity):
    """Update the quantity of an inventory item."""
    connection = get_connection()
    cursor = connection.cursor()
    cursor.execute(
        "UPDATE inventory SET quantity = :1 WHERE id = :2",
        [new_quantity, item_id]
    )
    connection.commit()
    cursor.close()
    connection.close()

# Fetch items that are low in stock
def get_inventory_low_stock(threshold):
    """Retrieve inventory items with quantities below a specified threshold."""
    connection = get_connection()
    cursor = connection.cursor()
    cursor.execute(
        "SELECT * FROM inventory WHERE quantity < :1",
        [threshold]
    )
    low_stock_items = cursor.fetchall()
    cursor.close()
    connection.close()
    return low_stock_items

# Add a new employee to the directory
def add_employee(name, contact_details, department):
    """Insert a new employee into the database."""
    connection = get_connection()
    cursor = connection.cursor()
    cursor.execute(
        "INSERT INTO employees (name, contact_details, department) VALUES (:1, :2, :3)",
        [name, contact_details, department]
    )
    connection.commit()
    cursor.close()
    connection.close()

# Fetch details of the fastest-selling item
def get_fastest_selling_item():
    """Fetch the fastest-selling item based on sales data."""
    connection = get_connection()
    cursor = connection.cursor()
    query = "SELECT product_name, SUM(quantity) as total_sold FROM sales GROUP BY product_name ORDER BY total_sold DESC FETCH FIRST 1 ROWS ONLY"
    cursor.execute(query)
    fastest_selling = cursor.fetchone()
    cursor.close()
    connection.close()
    return fastest_selling